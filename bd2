CREATE SCHEMA EXERCICIO;
SHOW search_path;
SET search_path TO EXERCICIO;


primary key(numpedido, codigoproduto),
	foreign key (numpedido) references Pedido(numpedido),
	foreign key (codigoproduto) references Produto(codigoproduto)

CREATE TABLE EX2_CLIENTE(
 codcliente int,
 nome varchar(60),
 datanascimento date,
 cpf varchar(11),
 CONSTRAINT pk2_EX2_cliente PRIMARY KEY (codcliente)
);
INSERT INTO EX2_CLIENTE VALUES (1, 'Sylvio Barbon', TO_DATE('05/12/1984', 'DD/MM/YYYY'),
'12315541212');


CREATE SEQUENCE EX2_LOG_SEQ
 START WITH 1
 INCREMENT BY 1
 MAXVALUE 99999
 MINVALUE 1
 CACHE 20
 ;


CREATE OR REPLACE FUNCTION ABAIXAR_ESTOQUE()
RETURNS TRIGGER AS
$$
BEGIN
 	IF (new.numeroitem > old.numeroitem) then
		new.quantidade = old.quantidade;
	END IF;
	RETURN NEW;
END
$$
 LANGUAGE 'plpgsql';

 
CREATE TRIGGER "abaixar_EST"
AFTER INSERT ON EX2_PRODUTO
FOR EACH ROW 
EXECUTE PROCEDURE
ABAIXAR_ESTOQUE();

update EX2_PRODUTO
set quantidade = 9
where descricao = 'Mouse'

SELECT * FROM EX2_PRODUTO;

CREATE OR REPLACE FUNCTION retornar_cod(varchar(30))
RETURNS integer AS
$$

		 select codigoproduto from produto
         WHERE descricaoproduto like CONCAT('%', $1, '%');

	
$$
 LANGUAGE sql;
 
 select * from retornar_cod('Qu');


CREATE OR REPLACE FUNCTION registros(integer, character(3), varchar(30), real )
RETURNS setof void AS
$$

		 insert into produto(codigoproduto , unidade , descricaoproduto , precounitario) values ( $1, $2, $3, $4)
        
         

$$
 LANGUAGE sql;
 
select registros(304, 'Kg ', 'carne', 5.17 );
select * from produto;

CREATE VIEW alunos_maiornota
(mat_aluno, nome_aluno, media) AS
SELECT mat_aluno, nome_aluno, MAX(media) FROM aluno;

CREATE TRIGGER "aaaaa"
AFTER INSERT(pode ser delete ou update tambem) ON bbbbbbbbbbbbb
FOR EACH ROW 
EXECUTE PROCEDURE
ccccccc();



create rule aaaaa
as on insert to bbbbbb
do insert into ccc
values(ddddddd);

drop aaaaa cascade ou on tabela

CREATE TRIGGER tg_Funcionario_Insert
ON Funcionario FOR AFTER INSERT
AS
INSERT INTO FuncionarioLog(FunCPF,
Comando, Usuario, Data) VALUES (cpf,
‘INSERT’, CURRENT_USER(),
CURRENT_DATE());
abs(x) – valor absoluto
• ceil(x) – menor inteiro maior ou igual ao argumento
• floor(x) - maior inteiro menor ou igual ao argumento
• cos(x) - coseno
• sin(x) – seno
• log(x) – logaritmo de x na base 10
• mod(x,y) – resto inteiro da divisão de x por y
• pow(x,y) - eleva o numero x à potência y
• random() – retorna um número aleatório entre 0 1 e 1 0
• round(x [,y]) - arredonda para a precisão informada
• sqrt(x) – raiz quadrada

SELECT log(53);
◼SELECT sin(30), pow(2,5);
◼SELECT random(),random(),random();

◼SELECT current_database();
◼SELECT version();
◼SELECT current_setting('datestyle');

CREATE SEQUENCE minha_seq
INCREMENT BY 2
MINVALUE 100
MAXVALUE 110
CYCLE;
DROP SEQUENCE minha_seq;
ALTER SEQUENCE minha_seq
INCREMENT BY 1;


CREATE OR REPLACE VIEW
empregados_projetoX (nome, endereco,
salario) AS
SELECT f.pnome, f.endereco, f.salario
FROM funcionario as f JOIN
trabalha_em as t ON f.cpf = t.fcpf
JOIN projeto as p ON t.projnumero =
p.projnumero
WHERE p.projnome = “Produto X”
